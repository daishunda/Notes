## 新建项目GITHUB

~~~
账号：1050683147@qq.com
密码：daishundadsd123
~~~



### 1、1 新建vue前端

![image-20220902222307078](前端笔记.assets/image-20220902222307078.png)

```
vue ui
--在cmd命令窗中输入
```

出现GUI界面

<img src="前端笔记.assets/image-20220902223421349.png" alt="image-20220902223421349" style="zoom:33%;" />

<img src="前端笔记.assets/image-20220902223819471.png" alt="image-20220902223819471" style="zoom: 80%;" />

<img src="前端笔记.assets/image-20220902223848314.png" alt="image-20220902223848314" style="zoom:80%;" />

![image-20220902224145028](前端笔记.assets/image-20220902224145028.png)

![image-20220902224158361](前端笔记.assets/image-20220902224158361.png)

~~~
分别选择：
Babel：es6 转 es5
Router：路由
CSS Pre-processors：CSS 预处理器，后面会提示你选择 less、sass、stylus 等
Linter / Formatter：代码格式校验，ESLint 代码格式校验
~~~

![image-20220902224858926](前端笔记.assets/image-20220902224858926.png)

### 1、2 在github添加项目

**新建一个项目在github（空项目）**

<img src="前端笔记.assets/image-20220904231459761.png" alt="image-20220904231459761" style="zoom:50%;" />

**添加文件**

<img src="前端笔记.assets/image-20220904231804858.png" alt="image-20220904231804858" style="zoom:50%;" />

上传文件存在文件大小与文件数量的限制，建议使用先将项目clone到本地，再通过push的方式将整个项目上传。

~~~
git add .
git commit -m '上传名'
git pull
git push origin main
~~~

## NORMAL

### 字符串转数字

\1. 转换函数：

js提供了parseInt()和parseFloat()两个转换函数。前者把值转换成整数，后者把值转换成浮点数。只有对String类型调用这些方法，这两个函数才能正确运行；对其他类型返回的都是NaN(Not a Number)。

一些示例如下：

```
parseInt(``"1234blue"``); ``//returns 1234``
parseInt(``"0xA"``); ``//returns 10``
parseInt(``"22.5"``); ``//returns 22``
parseInt(``"blue"``); ``//returns NaN
```

parseInt()方法还有基模式，可以把二进制、八进制、十六进制或其他任何进制的字符串转换成整数。基是由parseInt()方法的第二个参数指定的，示例如下：

```
parseInt(``"AF"``, ``16``); ``//returns 175``
parseInt(``"10"``, ``2``); ``//returns 2``
parseInt(``"10"``, ``8``); ``//returns 8``
parseInt(``"10"``, ``10``); ``//returns 10
```


如果十进制数包含前导0，那么最好采用基数10，这样才不会意外地得到八进制的值。例如：

```
parseInt(``"010"``); ``//returns 8``
parseInt(``"010"``, ``8``); ``//returns 8``
parseInt(``"010"``, ``10``); ``//returns 10
```

parseFloat()方法与parseInt()方法的处理方式相似。
使用parseFloat()方法的另一不同之处在于，字符串必须以十进制形式表示浮点数，parseFloat()没有基模式。

下面是使用parseFloat()方法的示例：

```
parseFloat(``"1234blue"``); ``//returns 1234.0``
parseFloat(``"0xA"``); ``//returns NaN``
parseFloat(``"22.5"``); ``//returns 22.5``
parseFloat(``"22.34.5"``); ``//returns 22.34``
parseFloat(``"0908"``); ``//returns 908``
parseFloat(``"blue"``); ``//returns NaN
```



### **push方法调用：**

```js
//字符串  
this.$router.push('home') //->/home

//对象
this.$router.push({path:'home'}) //->/home

//命名的路由
this.$router.push({name:'user', params:{userId: '123'}}) //->/user/123

//带查询参数，变成 /register?plan=private
this.$router.push({path:'register', query:{plan:private}}) 

const userId = '123';
//这里的 params 不生效
this.$router.push({path:'/user', params:{userId}});  //->/user
```

> params 传参，push 里面只能是 name: 'xxx', 不能是 path: 'xxx'，因为 params 只能用 name 来引入路由，如果这里写成了 path ，接收参数页面会是 undefined。

### **路由传参的方式：**

```js
1、手写完整的 path:
 
    this.$router.push({path: `/user/${userId}`});
 
    获取参数：this.$route.params.userId
 
2、用 params 传递：
 
    this.$router.push({name:'user', params:{userId: '123'}});
 
    获取参数：this.$route.params.userId
 
    url 形式：url 不带参数，http:localhost:8080/#/user
 
3、用 query 传递：
 
    this.$router.push({path:'/user', query:{userId: '123'}});
 
    获取参数：this.$route.query.userId
 
    url 形式：url 带参数，http:localhost:8080/#/user?userId=123
```

直白的说，query 相当于 get 请求，页面跳转的时候可以在地址栏看到请求参数，params 相当于 post 请求，参数不在地址栏中显示。

要注意，以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。

### **分割字符串：**

利用str.split()分割字符串时，在接口中使用时报错：

![image-20220502154934094](前端笔记.assets/image-20220502154934094.png)

改变写法：

str.[split](https://so.csdn.net/so/search?q=split&spm=1001.2101.3001.7020)('.') 

变成

(str || "").split('.')

### 利用formdata表单上传图片（文件）

**//append()---------在formdata表单中插入键值对，内容可以是文件**

formdata.append ( " 键  名 "，内 容 ) ；

**//delete()------------功能为删除formdata表单中的键值对**

formdata.delete( " 键 名 " )；



this.formData1.append("acceptcomment", this.textarea); //通过append向form对象添加数据

   this.formData1.append("acceptcomment", “字符串”); //通过append向form对象添加数据

this.formData1.delete(this.nametoname2[j][1]);



**实例**

//**获取文件域元素**

let fileDom = document.getElementById("fileId");

**//实例化一个表单对象**

let formdata = new FormData();

**//使用append方法，添加一个name叫file的文件**

**//name具体叫什么，由后端的接口文档提供**

![image-20220502235633475](前端笔记.assets/image-20220502235633475.png)

formdata.append('file',fileDOM.files[0]);

**//创建一个xhr对象**

let xhr = new XMLHttpRequest();

**//参照接口文档使用post请求，接口地址是"......",采用异步的方式(false,同步的方式用true)**

xhr.open('post','http://lianghj.top:8888/api/private/vi/upload',false)；

**//设置请求头，名字叫Authorization,值是token值**

xhr.setRequestHeader('Authorization','Bearer eyJhbGciOiJIUzI1NiIsInR5CcI6IkpXVCJ9.eyJ')

**//使用onreadystatechange去监听数据的返回，如果状态为4，表示请求已完成，已完成就打印相关的数据**

xhr.onreadystatechange = function ( ) {

​      if ( xhr.readystate == 4 ) {

​           **//console.log ( JSON.parse ( xhr.responseText ) )** 

​           let { meta } = JSON.parse ( xhr.responseText ) ;

​           **//状态码为200表示响应成功**

​            if ( meta.status == 200 ) {

​                 alert(meta.msg)

}

}

}

**//把添加完文件的表单对象传给服务端**

​        xhr.send ( formdata ) ;

### 组件传参

#### 1、父传子

![image-20220726222246289](前端笔记.assets/image-20220726222246289.png)

父组件



通过：加形参的方式传递右侧绑定具体data

![image-20220726222211196](前端笔记.assets/image-20220726222211196.png)

子组件通过props取得参数

![image-20220726222336299](前端笔记.assets/image-20220726222336299.png)

#### 2、子传父

![image-20220816001915383](前端笔记.assets/image-20220816001915383.png)

子组件中通过this.$emit("事件名称"，事件传递的参数)，发射事件到父组件，父组件监听做出反馈。

![image-20220816001544607](前端笔记.assets/image-20220816001544607.png)

父组件通过在组件中添加v-on(@)监听传递过来的事件(itemClick)，定义方法(cpnClick)进行使用。

### 插槽

### watch监听

![image-20220819112859392](前端笔记.assets/image-20220819112859392.png)

watch与data，props同级，同为属性，在watch中以变量名为函数名，监听变量的改变并进行操作，函数的默认参数为newValue和oldValue,用以取到该参数改变前后的值。

![image-20220819113208037](前端笔记.assets/image-20220819113208037.png)

Vue提供了一个watch方法可以让使用者去[监听](https://so.csdn.net/so/search?q=监听&spm=1001.2101.3001.7020)某些data内的数据变动，触发相应的方法，比如

![image-20220819113717952](前端笔记.assets/image-20220819113717952.png)

现在我需要监听这个**queryData**，我可以这样做：

![image-20220819113750787](前端笔记.assets/image-20220819113750787.png)

里面的deep设为了true，这样的话，如果修改了这个queryData中的任何一个属性，都会执行handler这个方法。不过其实这样开销是蛮大的，尤其是对象里面结构嵌套过深的时候。而且有时候我们就想关心这个**对象中的某个属性**，比如name，这个时候可以这样

![image-20220819113815925](前端笔记.assets/image-20220819113815925.png)

## VUEX

### 1、功能

本质是实现组件全局数据管理的一种机制，方便实现组件之间的数据共享。![image-20220817005640424](前端笔记.assets/image-20220817005640424.png)

### 2、优点

![image-20220817005804009](前端笔记.assets/image-20220817005804009.png)

### 3、应用场景

一般情况下，只有组件之间**需要共享**的数据，才有必要存储到vuex中；对于组件的私有数据，依旧存储在组件自身的data中即可；但将**所有数据**都存储在vuex中，也是可以实现的；

### 4、Vuex的基本使用

#### 1、安装vuex依赖

~~~
npm install vuex --save
~~~

#### 2、导入vuex包

~~~
import Vuex from 'vuex'

Vue.use(Vuex)
~~~

#### 3、创建store对象

~~~
const store = new Vuex.Store({

 //state中存放的就是全局共享的数据

 state:{ count:0 }

})
~~~

#### 4、将store对象挂载到vue实例中

~~~
new vue({

    el: "#app",

    render: h => h(app),

    router,

    //将创建的共享数据对象，挂载到vue实例中

    //所有的组件，就可以直接从store中获取全局的数据了

    store

})
~~~

![image-20220905114655409](前端笔记.assets/image-20220905114655409.png)

先引入Vue与Vuex,再通过Vue.use将Vuex安装到项目中；

通过new创建了一个 Vuex.store的构造函数的实例，并且暴露出去(export default)；

![image-20220905142859951](前端笔记.assets/image-20220905142859951.png)

在main.js中的vue实例上挂载store；

### 核心概念

#### 1、State

State提供韦德公共数据源，所有共享的数据都要统一放到store的state中进行存储；

~~~
//创建store数据源，提供位移公共数据

const store = new Vuex.Store({

 state:{ count:0 }

})
~~~

##### 组件访问State中数据的第一种方式：

~~~
this.$store.state.全局数据
~~~

##### 组件访问State中数据的第二种方式：

~~~
//1.从vuex中按需导入mapState函数

import { mapState } from 'vuex'

通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当

前组件的computed计算属性：

//2.将全局数据，映射为当前组件的计算属性

computed: {

   ...mapState(['count'])

}
~~~

通过导入的mapState函数，将当前组件需要的全局数据，**映射为当前组件的computed计算属性：**

#### 2、Mutation

##### 2.1、定义mutation

Mutation用于变更Store中的数据

只能通过mutation变更Store数据，**不可以直接操作Store中的数据；**

通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化；

![image-20220905232632606](前端笔记.assets/image-20220905232632606.png)

在store的mutation位置定义函数，在vue中用store中提供的commit函数调用mutation中的函数；

##### 2.2、mutation传递参数

![image-20220905234754626](前端笔记.assets/image-20220905234754626.png)

mutation第一个形参永远是state；

##### 2.3、另一种触发mutation的方式

![image-20220906001708105](前端笔记.assets/image-20220906001708105.png)

与mapState类似，用mapMutations将store中的函数引入映射**(用拓展运算符"...")**为该组件的函数；

~~~
export default{

    data(){
    
       return{}
    
    },
    
    computed:{
    
       ...mapState(['count'])
    
    },
    
    methods:{
    
    ...mapMutations(['sub']),
    
    btnHandler1(){
    
    //sub映射后可以和该组件中其他方法一样直接用this.的形式调用。
       this.sub();
    
    }
    
    }

}

~~~

对于要传递参数的函数也可以用mapMutation来进行使用；

~~~
//在store中定义函数，step为传递的参数；
//store中mutation中函数的第一个参数永远是state；

mutation:{

    subN(state,step){
    
        state.count -= step;
    
    }

}

//在vue中调入

 ...mapMutations(['sub','subN']),
 
 btnHandler2(){
 
     this.subN(3);
     
     //输入的参数从第二个开始(step);
 
 }
 
~~~

#### 3、Action

##### 3.1、this.$store.dispatch

触发actions异步任务时携带参数;

actions触发流程：

![image-20220906104523142](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220906104523142.png)

在Actions中定义异步函数：

```
actions:{
    //无参数传递
    addasync(context){
        
        setTimeout(() => {
        
            //在actions中，不能直接修改state中的数据
            //必须通过context.commit()触发某个mutation才行
            context.commit('add')
        
        },1000)
        
    },
    //有参数
    addasyncN(context,step){
        
        setTimeout(() => {
        
            context.commit('add',step)
        
        },1000)
        
    }

}
```

触发Actons：

```
methods:{

    handle(){
    
    //在调用dispatch函数，
    //触发actions时携带参数
    this.$store.dispatch('addNAsync',5)
    
    },
    
    btnHandler4(){
    
        //传递参数从action中函数定义的第二位形参开始
        this.$store.dispatch('addNAsync',5)
    
    }

}
```

##### 3.2、mapActions

与**mapMutation**和**mapState**用法类似；

![image-20220906110429300](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220906110429300.png)

#### 4、Getter

getter用于对store中的数据进行加工处理形成新的**数据**；

1、getter可以对Store中已有的数据加工处理之后形成新的数据，类似vue的计算属性；

2、Store中的数据发生变化，Getter中的数据也会跟着变化；

~~~
//定义Getter
const store = new Vuex.Store({

    state:{
    
        count:0
    
    },
    
    getters:{
    
        //调用showNum的时候，返回字符串;
        showNum: state => {
        
            return '当前最新的数量是【'+ state.count +'】'
        
        }
    
    }

})
~~~

#### mapState原理

##### 1、...拓展运算符

**针对对象和数组**

通俗来说一般用于将对象展开
示例代码：

~~~
let obj = {
    name:'ivan',
    age:21
}

let obj2 = {
    ...obj
}

console.log(obj2)
~~~

此时输出的obj2包含obj的属性name,age

##### 2、[]

在声明函数名时，如需动态使用字符串作为函数名可以使用
示例代码

~~~
let str = "myFun"

function [str](){
    console.log(123)
}

let str = "myFun"

let obj = {
    [str]: function() {
        console.log(123);
    }
}

obj.myFun()
obj[str]()

//123
//123
~~~

##### 3、vuex辅助函数原理

直接上代码

~~~
function mapState(arr) {
  let obj = {};
  arr.forEach(key => {
    obj[key] = function() {
      console.log(this);
      return this.$store.state[key];
    };
  });
  return obj;
}
~~~

调用：

```javascript
computed: {
    ...mapState(['name','age'])
}
```

正是使用了扩展[运算符](https://so.csdn.net/so/search?q=运算符&spm=1001.2101.3001.7020)和[]实现，同理 mapGetters、mapMutations等原理与之相同

## GTI RESET

（1）git reflog

![image-20220829183640968](前端笔记.assets/image-20220829183640968.png)

(2) git [reset](https://so.csdn.net/so/search?q=reset&spm=1001.2101.3001.7020) --hard ae5244a8   填写自己想要回退的版本

![image-20220829183705501](前端笔记.assets/image-20220829183705501.png)

通过以上两部，拉错了的代码就回到了之前的状态。把commit message写的清楚有意义，方便代码出错，回退。

(3)git push -f

若是想直接强制推送，可以加上 -f 参数强制push;

若是直接强制推送的话，那么之前对远程进行的操作与修改的版本将会消失(以你本地的版本为基准).
且注意，这种消失是不可以进行版本回退的，因为你会发现远程的版本已经和你本地版本一样了.

~~~
**举个例子**就是，
你和你(时空混乱 >_< )进行一场比赛，**本地你**还在起点线慢悠悠，**远程你**已经出发跑了100米。
在这100米过程中，**远程你**喝了一瓶水，吃了一碗面。
现在**本地你**要开跑了，正确做法是**pull远程你**，**本地你**直接从100米之后起跑，水和面都没浪费，也没有白跑。
但是！如果 -f **强制push**了呢？那么**远程你**又被**本地你**强制变回起点线了，**远程你**的这个100米就白跑了，水和面都没留下痕迹…
~~~

## 报错集

**Vue-cli 报 Trailing spaces not allowed no-trailing-spaces**

报错的主要原因是由于 ESLint 检查到了多余的空格
**解决方法一：**
简单有效：根据提示删除多余的空格即可

**解决方法二：**
配置 .eslintrc.js 文件，如下
找到 rules 字段,在其中添加：

~~~
rules: {
	'no-irregular-whitespace': 'off'
}
~~~

然后重新编译运行即可
————————————————

git pull过程出现：

**fatal: unable to access 'https://github.com/daishunda/Notes.git/': Proxy CONNECT aborted**

http.proxy出现问题：

~~~
git config --global --unset http.proxy
~~~

